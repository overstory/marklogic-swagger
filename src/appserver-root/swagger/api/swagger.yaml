openapi: "3.0.0"
info:
  version: "1.0"
  title: "My awesome REST API"
  description: "Does some cool stull that people really like."
#servers:
#    - url: "http://localhost:9000"
#      description: Test server

tags:
- name: "api"
  description: Swagger API blueprint

paths:
  /api:
    summary: The Swagger API blueprint
    description: The Swagger API blueprint, as YAML or HTML
    get:
      tags:
        - "api"
      summary: The Swagger API
      operationId: apiYaml
      x-marklogic-main-module: /swagger/code/filter-swagger.xqy
      responses:
        200:
          description: Good response, returns interface spec as OpenAPI Swagger or HTML
          content:
              text/x-yaml:
                example: 'openapi: "3.0.0"
                  info:
                    version: "1.0"
                    title: "My Awesome REST API"
                    description: "Does some cool stuff that people really like."'
              text/html:
                example: '<html>
                  ...
                  </html>'
  /simple-module-get:
    summary: Module GET
    description: Simple example endpoint
    get:
      tags:
        - "Test APIs"
      summary: Simple GET to trigger main module
      x-marklogic-main-module: /swagger/sample/test-module-get.xqy
      responses:
        200:
          description: Good response
          content:
              text/plain:
                example: 'Module GET'
  /{path-var-1}/path-match-module-get/{path-var-2}:
    summary: Path Matched Get
    description: Example endpoint with path matching
    get:
      tags:
        - "Test APIs"
      summary: Simple GET to trigger path-matched main module
      x-marklogic-main-module: /swagger/sample/test-module-path-matched-get.xqy
      responses:
        200:
          description: Good response
          content:
              text/plain:
                example: 'Module GET'
  /{path-var-1}/path-match-function-get/{path-var-2}:
    summary: Function Get
    description: Example endpoint with executed from a function in a library module
    get:
      tags:
        - "Test APIs"
      summary: Simple GET to trigger path-matched main module
      x-marklogic-library-module: /swagger/sample/test-function-get.xqy
      x-marklogic-function-ns: http://it.com/ns
      x-marklogic-function-name: test-get
      responses:
        200:
          description: Good response
          content:
              text/plain:
                example: 'Module GET'
  /{path-var-1}/path-match-module-post/{path-var-2}:
    summary: Module Post
    description: Example endpoint to post content to a module
    post:
      tags:
        - "Test APIs"
      summary: Simple POST to trigger path-matched main module with a payload in the HTTP request body
      x-marklogic-main-module: /swagger/sample/test-module-path-matched-post.xqy
      requestBody:
        description: Sample XML payload starting with a <sample> element
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/sample'
      responses:
        200:
          description: Good response
          content:
              text/plain:
                example: 'Uploaded'
  /{path-var-1}/path-match-function-post/{path-var-2}:
    summary: Function Post
    description: Example endpoint to post content to a function
    post:
      tags:
        - "Test APIs"
      summary: Simple POST to trigger path-matched to a library module with a payload in the HTTP request body
      x-marklogic-library-module: /swagger/sample/test-function-get.xqy
      x-marklogic-function-ns: http://it.com/ns
      x-marklogic-function-name: test-post
      requestBody:
        description: Sample XML payload starting with a <sample> element
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/sample'
      responses:
        200:
          description: Good response
          content:
              text/plain:
                example: 'Uploaded'
components:
  schemas:
    sample:
      type: object
      xml:
        name: 'sample'